/**
 * Models the Flappy Bird game at a high level by creating in-game objects,
 * handling user inputs, and moving through game states.
 * Includes modifications for Treat functionality.
 * Modified to handle treat-bird collision detection.
 */
class FlappyBirdGame {

    // Game objects and state variables
    field FlappyBird bird;           // FlappyBird object.
    field Scoreboard scoreboard;     // Scoreboard object.
    field Treat treat;               // Treat object for power-ups.
    field Array pipes;               // Visible pipes on screen.
    field Pipe pipe;

    // Bird state
    field int bird_wing_state_count; // Track Bird wing image angle.
    field int bird_fall_count;       // Track Bird's downward movement.
    field int bird_height_default;   // Default Bird starting height.

    // Pipe state
    field int count_pipes;           // Number of pipes visible.
    field int dist_between_pipes;    // Interval between successive pipes.
    field int dist_after_last_pipe;  // Amount of space following last created pipe.
    field int total_pipes;           // Number of pipes created.
    field int pipe_width;            // Width of pipe.
    field int pipe_gap;              // Gap between top and bottom pipe.
    field int lastPipeMiddleY;       // Y-coordinate of the middle of the last created pipe gap (for treat spawning)

    // Game state
    field int jumps;                 // Number of jumps made in game.
    field int highscore;             // Highest score achieved in game.
    field int level;                 // Level of game.


    /* Flappy Bird Game constructor. */
    constructor FlappyBirdGame new() {
        let bird_height_default = 150;
        let scoreboard = Scoreboard.new();
        let pipes = Array.new(10); // Max 10 pipes on screen
        let count_pipes = 0;
        let dist_between_pipes = 100;
        let dist_after_last_pipe = 0;
        let jumps = 1;
        let total_pipes = 0;
        let highscore = 0;
        let pipe_width = 15;         // Default values for level 0
        let pipe_gap = 120;          // Default values for level 0
        let lastPipeMiddleY = 112;   // Initialize last pipe Y position (default/center)
        return this;
    }

    /* Display instructions on the screen. */
    method void displayInstructions() {
        do Output.moveCursor(0, 0);
        do Output.printString("To Jump, press the space bar.");
        do Output.println();
        do Output.printString("To Quit, press the 'q' key.");
        do Output.println();
        do Output.printString("To win, stay alive.");
        do Output.println();
        do Output.printString("Remember to have fun!");
        do Output.println();
        do Output.printString("High Score: ");
        do Output.printInt(highscore);
        return;
    }

    /* Main loop for running game. */
    method void run() {
        var char key;
        var char last_key;
        var int score;
        var boolean exit; // Use boolean for clarity

        let exit = false;
        do initializeGameState();
        do waitForGameToStart();
        let last_key = 0; // Initialize last_key

        while (~exit) { // Loop until exit is true
            let key = Keyboard.keyPressed();

            // Handle jump input
            if ((key = 32) & ~(last_key = 32)) { // space bar pressed (rising edge)
                let jumps = jumps + 1;
                do bird.moveUp();
            } else {
                // If no jump, apply gravity and flap wings
                do updateBirdFallState();
                do updateBirdWingState();
            }

            // Handle quit input
            if (key = 81) { // 'q' key
                let exit = true;
            }

            // Update game state only if not exiting
            if (~exit) {
                // Move pipes left.
                do shiftPipesLeft();
                // Remove first pipe if no longer on screen.
                do disposeUnseenPipe();
                // Create new pipe object if existing last pipe has moved far enough.
                do createNewPipe();

                // Handle treat logic
                do spawnTreatIfNeeded();  // Decide if a treat should appear
                do treat.treatAdvance();  // Move the treat if it's coming
                do checkTreatCollision(); // Check if the bird collected the treat
                do treat.timerTick();     // Update active treat duration

                // Update score and level
                let score = calculateScore();
                do updateLevel(score);
                do Screen.setColor(false);
                do Screen.drawRectangle(0, 60, 15, 255);

                // Check for collisions
                if (findCollision()) {
                    // Update high score if needed
                    if (score > highscore) {
                        let highscore = score;
                    }
                    do displayScore(); // Show final score
                    do Sys.wait(3000); // Pause before reset

                    // Reset level defaults
                    let pipe_width = 15;
                    let pipe_gap = 120;
                    do initializeGameState(); // Reset game state
                    do waitForGameToStart();  // Wait for player input to start again
                    let last_key = 0; // Reset last_key after restarting
                    let key = 0;      // Reset key after restarting
                } else {
                    // If no collision, draw the updated game state
                    do bird.draw();
                    // Pipes and Treat are drawn within their respective update methods
                }
            }

            // Remember the last key pressed for jump detection
            let last_key = key;

            // Small delay for game speed control
            do Sys.wait(20); // Increased wait time slightly for smoother gameplay, adjust as needed
        } // End of while loop

        // Cleanup before exiting the program
        do dispose();
        return;
    }

    /* Animate Bird before game begins. */
    method void waitForGameToStart() {
        var char key;
        let key = 0; // Use 0 for no key pressed

        while (key = 0) {
            do bird.draw();
            do updateBirdWingState(); // Animate wings
            do Sys.wait(50);          // Wait a bit longer between frames here
            let key = Keyboard.keyPressed();
       }
        // Clear the initial key press so it doesn't immediately trigger a jump
        while (~(Keyboard.keyPressed() = 0)) {}
        return;
    }

    /* Update game level based on score. */
    method void updateLevel(int score) {
        // Note: Order matters here, check highest score first
        if(score > 100) {
            let level = 4;
            let pipe_width = 50;
            let pipe_gap = 70;
        } else{
        if (score > 50) {
            let level = 3;
            let pipe_width = 40;
            let pipe_gap = 75;
        } else {
            if (score > 25) {
                let level = 2;
                let pipe_width = 35;
                let pipe_gap = 90;
            } else {
                if (score > 10) {
                    let level = 1;
                    let pipe_width = 25;
                    let pipe_gap = 100;
                } else {
                    let level = 0;
                    let pipe_width = 15; // Default level 0
                    let pipe_gap = 120; // Default level 0
                }
            }
            }
        }
        return;
    }

    /* Set all fields to pre-game state. */
    method void initializeGameState() {
        var int i;

        // Dispose old bird if exists, then create new one
        if (~(bird = null)) {
            do bird.dispose();
        }
        let bird = FlappyBird.new(bird_height_default);

        // Reset treat state (dispose old, create new)
        if (~(treat = null)) {
            do treat.dispose();
        }
        let treat = Treat.new();

        // Remove existing pipes from screen and memory
        let i = 0;
        while (i < count_pipes) {
            let pipe = pipes[i];
            if (~(pipe = null)) { // Check if pipe object exists
               do pipe.erase(); // Erase from screen first
               do pipe.dispose(); // Then deallocate memory
            }
            let i = i + 1;
        }

        // Reset game variables
        let count_pipes = 0;
        let total_pipes = 0;
        let bird_wing_state_count = 1;
        let bird_fall_count = 1;
        let dist_after_last_pipe = dist_between_pipes; // Ready to create first pipe
        let lastPipeMiddleY = 112; // Reset last pipe Y position
        let jumps = 0; // Start jumps at 0 for the new game
        do Screen.clearScreen(); 
        do displayInstructions();

        return;
    }

    /* Display final score to screen. */
    method void displayScore() {
        var int score;
        // We already calculated score before calling this in run()
        let score = calculateScore();
        do scoreboard.draw(score); // Assuming Scoreboard class handles positioning
        return;
    }

    /* Update bird's rising/falling status. */
    method void updateBirdFallState() {
        var int fall_speed_delay; // Cycles to wait before falling 1 pixel

        // Default fall speed delay
        let fall_speed_delay = 5;

        // If treat 2 (slow down) is active, increase the delay (slower fall)
        if (treat.treatOn() = 2) {
            let fall_speed_delay = 10;
        }

        // ðŸ›  Reset bird_fall_count if fall speed delay has changed
        if (bird_fall_count > fall_speed_delay) {
            let bird_fall_count = 1;
        }

        if (bird_fall_count = fall_speed_delay) {
            do bird.moveDown();
            let bird_fall_count = 1; // Reset counter
        } else {
            let bird_fall_count = bird_fall_count + 1;
        }
        return;
    }

    /* Update bird wing display state. */
    method void updateBirdWingState() {
        // Only cycle wings after every few cycles to prevent changing too fast.
        if (bird_wing_state_count = 5) { // Adjust '5' for desired flap speed
            do bird.cycleWingState();
            let bird_wing_state_count = 1; // Reset counter
        } else {
            let bird_wing_state_count = bird_wing_state_count + 1;
        }
        return;
    }

    /* Draw pipes and shift their coordinates to the left. */
    method void shiftPipesLeft() {
        var int i;
        let i = 0;
        while (i < count_pipes) {
            let pipe = pipes[i];
            // Erase previous position (optional if moveLeft handles it)
            // do pipe.erase();
            do pipe.moveLeft(); // Move pipe logic
            do pipe.draw();     // Draw pipe in new position
            let i = i + 1;
        }
        return;
    }

    /* Remove Pipe object once it has exited the screen. */
    method void disposeUnseenPipe() {
        var int i;

        if (count_pipes = 0) {
            return; // No pipes to remove
        }

        let pipe = pipes[0]; // Always check the first pipe in the array

        // Check if the pipe is completely off-screen to the left
        if (~(pipe = null)) { // Safety check before calling method on pipe
            if (pipe.isOffScreen()) { // Assumes Pipe class has isOffScreen() method
                do pipe.dispose();  // Deallocate memory (erase is called in dispose)
                let count_pipes = count_pipes - 1;

                // Shift remaining pipes down in the array
                let i = 0;
                while (i < count_pipes) {
                    let pipes[i] = pipes[i+1];
                    let i = i + 1;
                }
                let pipes[count_pipes] = null; // Clear the last (now unused) slot
            }
        }
        return;
    }

    /* Create new pipe to go onscreen. */
    method void createNewPipe() {
        var int pipeMiddleY;

        // Check if enough distance has passed since the last pipe
        if (dist_after_last_pipe > dist_between_pipes) { // Use > for safety
            // Ensure there's space in the pipes array
            if (count_pipes < 10) { // Assuming max 10 pipes
                // Create the new pipe object
                let pipes[count_pipes] = Pipe.new(jumps, pipe_width, pipe_gap);
                let pipe = pipes[count_pipes];

                // Calculate the middle Y position for the NEW pipe's gap
                // Assuming pipe.getGapTop() is the top edge of the gap
                let pipeMiddleY = pipe.getGapTop() + (pipe_gap / 2); // Center of the gap

                // *** Store this value for use when spawning a treat ***
                let lastPipeMiddleY = pipeMiddleY;

                // Update counters and reset distance
                let count_pipes = count_pipes + 1;
                let total_pipes = total_pipes + 1;
                let dist_after_last_pipe = 0; // Reset distance counter
            } // else: array is full, cannot create new pipe yet
        } else {
            // If no new pipe created, increment distance based on pipe speed
            // Assumes pipe speed is consistent (e.g., 1 pixel per frame)
            // If pipes[0] doesn't exist, this will fail. Need safety check.
            if (count_pipes > 0) {
               let pipe = pipes[0]; // Should use speed from any pipe, assume uniform speed
               // Check if pipe is not null before accessing it
               if (~(pipe = null)) {
                 let dist_after_last_pipe = dist_after_last_pipe + pipe.getWidthIncrement(); // Assumes getWidthIncrement is speed
               } else {
                    // Handle case where pipe[0] might be null unexpectedly
                    // Maybe reset dist_after_last_pipe or use a default speed?
                    let dist_after_last_pipe = dist_after_last_pipe + 1; // Default speed assumption
               }
            } else {
                    // If no pipes exist yet, increment distance to trigger first pipe creation
                    let dist_after_last_pipe = dist_after_last_pipe + 1; // Default speed assumption
            }
        }
        return;
    }

    /* Check if we should spawn a treat (if none is currently active/coming) */
    method void spawnTreatIfNeeded() {
        var int randomNumber;
        var int spawnChance; // e.g., 3 => 3 in 100 chance to spawn a treat
        
        let spawnChance = 3; // Adjust probability as needed

        // Only spawn a treat if none is currently coming or active
        // Using treat.treatComing() and treat.treatOn() to check if a treat is in play
        if ((treat.treatComing() = 0) & (treat.treatOn() = 0)) {
            // Use a combination of game state variables for pseudo-randomness
            // Replacing Sys.time() which is not available in Jack
            // Adding jumps, total_pipes, and bird Y for variability
            let randomNumber = MyMath.mod(jumps + total_pipes + bird.getYOffset(), 100) + 1;

            // Check against spawn chance
            if (randomNumber < spawnChance) {
                // Generate a random treat type (1-4) using game state variables
                let randomNumber = MyMath.mod(jumps * bird.getYOffset() + total_pipes + 5, 4) + 1; // Added 5 for more variation

                // *** Start the treat, passing the type and the stored pipe gap middle Y position ***
                // The Treat class will calculate its own Ypos based on this middle Y and its height.
                do treat.startComing(randomNumber, lastPipeMiddleY);
            }
        }
        return;
    }

    /* Check for collision between bird and treat */
    method void checkTreatCollision() {
        var int birdX, birdY, birdWidth, birdHeight;
        var int treatX, treatY, treatWidth, treatHeight;
        var boolean horizontalOverlap, verticalOverlap;

        // Only check collision if a treat is actively coming towards the bird
        if (treat.treatComing() > 0) { // Check if treat is coming

            // Get bird dimensions and position
            let birdX = bird.getXOffset();    // Assume bird has getXOffset() for its left edge
            let birdY = bird.getYOffset();    // Assume bird has getYOffset() for its top edge
            let birdWidth = bird.getSizeX();   // Assumes bird has getSizeX()
            let birdHeight = bird.getSizeY();  // Assumes bird has getSizeY()

            // Get treat dimensions and position
            let treatX = treat.getTreatXpos();   // Assuming Treat class has getTreatXpos()
            let treatY = treat.getTreatYpos();   // Assuming Treat class has getTreatYpos()
            let treatWidth = treat.getTreatWidth(); // Assuming Treat class has getTreatWidth()
            let treatHeight = treat.getTreatHeight(); // Assuming Treat class has getTreatHeight()


            // 1. Check for horizontal overlap (AABB collision X-axis)
            // Bird's right edge > treat's left edge AND Bird's left edge < treat's right edge
            let horizontalOverlap = ((birdX + birdWidth) > treatX) & (birdX < (treatX + treatWidth));

            // 2. Check for vertical overlap (AABB collision Y-axis)
            // Bird's bottom edge > treat's top edge AND Bird's top edge < treat's bottom edge
            let verticalOverlap = ((birdY + birdHeight) > treatY) & (birdY < (treatY + treatHeight));

            // Collision occurs if there is both horizontal and vertical overlap
            if (horizontalOverlap & verticalOverlap) {
                // Collision detected!
                do treat.treatGot(); // Activate the treat effect
            }
        }
        return;
    }

    /* Calculate current score based on pipes passed */
    method int calculateScore() {
        // Simplest scoring: score is the total number of pipes successfully created.
        // This increments when createNewPipe successfully adds a pipe.
        var int score;
        var int i;
        let score = total_pipes;
        // Subtract pipes that haven't been fully passed yet
        let i = 0;
        while (i < count_pipes) {
            let pipe = pipes[i]; // Use the field 'pipe'
            // If the bird hasn't passed this pipe yet, don't count it in the score
            if (bird.getXOffset() < (pipe.getXOffset() + pipe.getWidthCurrent() + 1)) {
                let score = score - 1;
            }
            let i = i + 1;
        }
        // Apply score doubling if Treat 3 is active
        if (treat.treatOn() = 3) {
            let score = score * 2;
        }

        // Ensure score doesn't go below zero (shouldn't happen with total_pipes based scoring)
        if (score < 0) {
            let score = 0;
        }

        return score;
    }


    /* Determine if there has been a collision between bird and borders or pipes. */
    method boolean findCollision() {
        var int i;

        // If treat 4 is active (helmet protection), bird is invincible against pipes/borders
        if (treat.treatOn() = 4) {
            return false; // No collision if invincible
        }

        // Has bird hit the top or bottom of the screen?
        // Assumes bird.getYOffset() is the top edge and bird.getSizeY() is height
        if ((bird.getYOffset() < 0) | ((bird.getYOffset() + bird.getSizeY()) > 255)) { // Use < 0 for top, > 255 for bottom
            return true;
        }

        // Has bird hit any of the pipes?
        let i = 0;
        while (i < count_pipes) {
            let pipe = pipes[i];
            if (~(pipe = null)) { // Safety check
                if (collides(pipe)) { // Check collision with this specific pipe
                    // If treat 1 is active (easy map), consume the treat instead of dying
                    if (treat.treatOn() = 1) {
                        do treat.treatDone(); // Use up the treat
                        return false; // Collision ignored due to treat
                    }
                    // Otherwise, it's a real collision
                    return true;
                }
            }
            let i = i + 1;
        }

        // No collisions found
        return false;
    }

    /* Has Bird collided with a specific pipe. (Helper for findCollision) */
    method boolean collides(Pipe pipe) {
        var int birdX, birdY, birdWidth, birdHeight;
        var int pipeX, pipeWidth, pipeGapTop, pipeGapBottom;

        // Get dimensions and positions
        let birdX = bird.getXOffset(); // Assume bird has getXOffset() for its left edge
        let birdY = bird.getYOffset(); // Assume bird has getYOffset() for its top edge
        let birdWidth = bird.getSizeX();  // Assumes bird has getSizeX()
        let birdHeight = bird.getSizeY(); // Assumes bird has getSizeY()

        let pipeX = pipe.getXOffset(); // Assume pipe has getXOffset() for its left edge
        let pipeWidth = pipe.getWidthCurrent(); // Assume pipe has getWidthCurrent() for its visible width
        let pipeGapTop = pipe.getGapTop(); // Assume pipe has getGapTop() for the bottom Y of the top pipe piece
        let pipeGapBottom = pipe.getGapBottom(); // Assume pipe has getGapBottom() for the top Y of the bottom pipe piece

        // 1. Check for horizontal overlap (AABB collision X-axis)
        // Bird's right edge is past pipe's left edge AND Bird's left edge is before pipe's right edge
        if (((birdX + birdWidth) > pipeX) & (birdX < (pipeX + pipeWidth))) {

            // 2. Check for vertical collision (AABB collision Y-axis)
            // Bird's top edge is above pipe's top gap OR Bird's bottom edge is below pipe's bottom gap
            if ((birdY < pipeGapTop) | ((birdY + birdHeight) > pipeGapBottom)) {
                return true; // Collision detected
            }
        }

        // No collision with this pipe
        return false;
    }

    /* Dispose of FlappyBirdGame object and objects created as properties. */
    method void dispose() {
        var int i;

        // Dispose pipes
        let i = 0;
        while (i < count_pipes) {
           let pipe = pipes[i];
           if (~(pipe = null)) {
             do pipe.dispose();
           }
           let i = i + 1;
        }
        // Deallocate the pipes array itself
        do pipes.dispose();


        // Dispose other objects
        if (~(scoreboard = null)) { do scoreboard.dispose(); }
        if (~(bird = null)) { do bird.dispose(); }
        if (~(treat = null)) { do treat.dispose(); }

        // Deallocate this object itself
        do Memory.deAlloc(this);

        return;
    }
}
