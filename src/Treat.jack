/**
 * Manages the special treat (power-up) state, movement, collision, and effects.
 * Uses a DrawTreat class for drawing treats.
 */
class Treat {
    field int treatComing;
    field int treatOn;
    field int treatTimer;
    field int treatXpos;
    field int treatYpos;
    field int treatSpeed;
    field int treatWidth;
    field int treatHeight;
    field int screen_width;
    field int screen_height;
    field int prevTreatXpos;
    field int prevTreatYpos;

    constructor Treat new() {
        let treatComing = 0;
        let treatOn = 0;
        let treatTimer = 0;
        let treatXpos = 511;
        let treatYpos = 0;
        let treatSpeed = 1;
        let treatWidth = 32;
        let treatHeight = 32;
        let screen_width = 512;
        let screen_height = 256;
        let prevTreatXpos = treatXpos;
        let prevTreatYpos = treatYpos;
        return this;
    }

    method void startComing(int treatNum, int gapMiddleY) {
        if ((treatComing = 0) & ~(treatNum = 1)) {
            do clearTreatVisual();
            let treatComing = treatNum;
            let treatOn = 0;
            let treatTimer = 0;
            let treatXpos = screen_width;
            let treatYpos = gapMiddleY - (treatHeight / 2);
            if (treatYpos < 0) { let treatYpos = 0; }
            if ((treatYpos + treatHeight) > (screen_height - 1)) {
                let treatYpos = screen_height - 1 - treatHeight;
            }
            let prevTreatXpos = treatXpos;
            let prevTreatYpos = treatYpos;
        }
        return;
    }
    
    method int treatOn() { return treatOn; }
    method int treatComing() { return treatComing; }
    method int getTreatXpos() { return treatXpos; }
    method int getTreatYpos() { return treatYpos; }
    method int getTreatWidth() { return treatWidth; }
    method int getTreatHeight() { return treatHeight; }

    method void dispose() {
        do clearTreatVisual();
        do clearExplain();
        do Memory.deAlloc(this);
        return;
    }

    method void treatAdvance() {
        if (treatComing = 0) { return; }

        do clearTreatVisual();
        let prevTreatXpos = treatXpos;
        let prevTreatYpos = treatYpos;
        let treatXpos = treatXpos - treatSpeed;

        if ((treatXpos + treatWidth) < 0) {
            do clearTreatVisual();
            let treatComing = 0;
            let treatXpos = screen_width;
            let prevTreatXpos = treatXpos;
            do clearExplain();
        } else {
            if (treatXpos < screen_width) {
                do draw();
            }
        }
        return;
    }

    method void treatGot() {
        if (treatComing > 1) {
            do clearTreatVisual();
            do writeExplain();
            do Sys.wait(1000);
            let treatOn = treatComing;
            let treatComing = 0;
            let treatTimer = 0;
            let treatXpos = screen_width;
            let prevTreatXpos = screen_width;
            do clearExplain();
        }
        return;
    }

    method void clearTreatVisual() {
        var int eraseX_start, eraseY_start, eraseX_end, eraseY_end;
        var boolean validX, validY, validRect;

        let eraseX_start = prevTreatXpos;
        let eraseY_start = prevTreatYpos;
        let eraseX_end = prevTreatXpos + treatWidth;
        let eraseY_end = prevTreatYpos + treatHeight;

        if (eraseX_start < 0) { let eraseX_start = 0; }
        if (eraseY_start < 0) { let eraseY_start = 0; }
        if (eraseX_end > screen_width) { let eraseX_end = screen_width; }
        if (eraseY_end > screen_height) { let eraseY_end = screen_height; }

        let validX = (eraseX_start < eraseX_end);
        let validY = (eraseY_start < eraseY_end);
        let validRect = validX & validY;

        if (validRect) {
            do Screen.setColor(false);
            do Screen.drawRectangle(eraseX_start, eraseY_start, eraseX_end - 1, eraseY_end - 1);
            do Screen.setColor(true);
        }
        return;
    }

    method int treatAtBird() {
        var int birdMinX, birdMaxX;
        let birdMinX = 224;
        let birdMaxX = 256;

        if (((treatXpos + treatWidth) > birdMinX) & (treatXpos < birdMaxX)) {
            return 1;
        }
        return 0;
    }

    method void treatDone() {
        let treatOn = 0;
        let treatTimer = 0;
        do clearExplain();
        return;
    }

    method void timerTick() {
        var int duration;
        let duration = 300;

        if ((treatOn = 2) | (treatOn = 4)) {
            let treatTimer = treatTimer + 1;
            if (treatTimer > duration) {
                do treatDone();
                return;
            }
        } else {
            if (treatOn = 3) {
                let duration = 1;
                let treatTimer = treatTimer + 1;
                if (treatTimer > duration) {
                    do treatDone();
                    return;
                }
            }
        }
        return;
    }

    method void writeExplain() {
        var String explanation;
        var int rectX1, rectY1, rectX2, rectY2;
        var int textRow, textCol;

        if (treatComing = 2) {
            let explanation = "Slow falling activated!";
        } else {
            if (treatComing = 3) {
                let explanation = "Score Doubled!";
            } else {
                if (treatComing = 4) {
                    let explanation = "You are Invincible!";
                } else {
                    let explanation = "";
                }
            }
        }

        let rectX1 = 50;
        let rectY1 = 100;
        let rectX2 = 350;
        let rectY2 = 120;
        let textCol = (rectX1 + 5) / 8;
        let textRow = (rectY1 + 5) / 11;

        do Screen.setColor(false);
        do Screen.drawRectangle(rectX1, rectY1, rectX2, rectY2);
        do Screen.setColor(true);
        do Output.moveCursor(textRow, textCol);
        do Output.printString(explanation);
        return;
    }

    method void clearExplain() {
        do Output.moveCursor(21, 0);
        do Output.printString("                                                ");
        return;
    }

    method void draw() {
        var int drawX_start, drawY_start;
        var boolean validPosition;

        if ((treatComing < 2) | (treatComing > 4)) {
            return;
        }

        let validPosition = (treatXpos < screen_width) & 
                            ((treatXpos + treatWidth) > 0) &
                            (treatYpos < screen_height) &
                            ((treatYpos + treatHeight) > 0);

        if (validPosition) {
            let drawX_start = treatXpos;
            let drawY_start = treatYpos;
            if (drawX_start < 0) { let drawX_start = 0; }
            if (drawY_start < 0) { let drawY_start = 0; }
            do DrawTreat.drawTreat(treatComing, drawX_start, drawY_start);
        }
        return;
    }
}