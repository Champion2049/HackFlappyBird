class Pipe
{
  /*
  Models an individual Pipe object and creates/updates the pipe image.
  */
  field int width;                  // Pipe width.
  field int width_current;          // Current width (for entering/leaving screen).
  field int width_increment;        // Amount to shift pipe for each step.
  field int x_offset;               // Current x-coordinate for pipe image.
  field int gap_size;               // Distance between top and bottom pieces.
  field int gap_top;                // Coordinate for bottom of top pipe.
  field int gap_bottom;             // Coordinate for top of bottom pipe.
  field int screen_width;           // Screen width.
  field int screen_height;          // Screen height.

  /*
  Construct new Pipe object.
  */
  constructor Pipe new(int gap_offset) {
    let width = 12;
    let width_increment = 1;
    let width_current = width_increment;
    let x_offset = 509;
    let screen_width = 512;
    let screen_height = 256;
    
    // Increased gap size for easier gameplay
    let gap_size = 90;

    let gap_top = calculateGapTop(gap_offset);
    let gap_bottom = gap_top + gap_size;

    return this;
  }

  /*
  Calculate coordinate for bottom of top pipe.
  Ensures that the gap remains within valid screen range.
  */
  method int calculateGapTop(int offset)
  {
    var int mod, gap_top;
    
    let mod = MyMath.mod(offset, 6);
    let gap_top = (mod + 1) * 30;

    // Ensure the gap does not exceed screen height
    if (gap_top + gap_size > 255) {
        return 255 - gap_size;
    }

    return gap_top;
  }

  /*
  Shift the pipe left, erasing its previous position.
  */
  method void shift()
  {
    if (x_offset < (screen_width - width)) {
      do Screen.setColor(false);

      // Erase top pipe (ensure within screen bounds)
      if (gap_top > 0) {
        do Screen.drawRectangle(x_offset + width_current - width_increment, 0, x_offset + width_current, gap_top);
      }

      // Erase bottom pipe (ensure within screen bounds)
      if (gap_bottom < screen_height) {
        do Screen.drawRectangle(x_offset + width_current - width_increment, gap_bottom, x_offset + width_current, screen_height - 1);
      }
    }
    return;
  }

  /*
  Move pipe image to the left. Deletes image if out of bounds.
  */
  method void moveLeft()
  {
    do shift();

    // Ensure pipe width grows only when it should
    if (width_current < width) {
      if (x_offset > 0) {
        let width_current = width_current + width_increment;
      }
    }

    // Prevent x_offset from going negative
    if (x_offset > width_increment) {
      let x_offset = x_offset - width_increment;
    } else {
      let x_offset = 0;
      let width_current = width_current - width_increment;
    }

    return;
  }

  /*
  Get current width.
  */
  method int getWidthCurrent()
  {
    return width_current;
  }

  /*
  Get width shift increment.
  */
  method int getWidthIncrement()
  {
    return width_increment;
  }

  /*
  Get current x-coordinate.
  */
  method int getXOffset()
  {
    return x_offset;
  }

  /*
  Get y-coordinate of top of gap.
  */
  method int getGapTop()
  {
    return gap_top;
  }

  /*
  Get y-coordinate of bottom of gap.
  */
  method int getGapBottom()
  {
    return gap_bottom;
  }

  /*
  Draw pipe at current x-offset.
  */
  method void draw()
  {
    if (x_offset - width_increment > 0) {
      do Screen.setColor(true);

      // Draw top pipe (ensure within bounds)
      if (gap_top > 0) {
        do Screen.drawRectangle(x_offset - width_increment, 0, x_offset, gap_top);
      }

      // Draw bottom pipe (ensure within bounds)
      if (gap_bottom < screen_height) {
        do Screen.drawRectangle(x_offset - width_increment, gap_bottom, x_offset, screen_height - 1);
      }
    }
    return;
  }

  /*
  Dispose of pipe object.
  */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
